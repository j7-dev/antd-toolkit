import React from "react";
import { TConstant } from "../types";
import { SelectProps } from "antd/lib/select";
import { TooltipProps } from "antd/lib/tooltip";
export declare const useConstantSelect: ({ constants, hasTooltip, tooltipProps, selectProps, }: {
    constants: TConstant<string>[];
    hasTooltip?: boolean | undefined;
    tooltipProps?: TooltipProps | undefined;
    selectProps?: SelectProps<any, import("rc-select/lib/Select").DefaultOptionType> | undefined;
}) => {
    value: string;
    setValue: React.Dispatch<React.SetStateAction<string>>;
    Select: React.NamedExoticComponent<{}>;
    selectProps: {
        value: string;
        options: {
            label: string;
            value: string;
        }[];
        onChange: (theValue: string) => void;
        placement?: "topLeft" | "topRight" | "bottomLeft" | "bottomRight" | undefined;
        mode?: "multiple" | "tags" | undefined;
        status?: "" | "warning" | "error" | undefined;
        popupClassName?: string | undefined;
        dropdownClassName?: string | undefined;
        dropdownMatchSelectWidth?: number | boolean | undefined;
        popupMatchSelectWidth?: number | boolean | undefined;
        className?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        children?: React.ReactNode;
        builtinPlacements?: import("@rc-component/trigger").BuildInPlacements | undefined;
        transitionName?: string | undefined;
        animation?: string | undefined;
        prefixCls?: string | undefined;
        showArrow?: boolean | undefined;
        id?: string | undefined;
        defaultValue?: any;
        size?: import("antd/lib/button").ButtonSize;
        disabled?: boolean | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
        rootClassName?: string | undefined;
        open?: boolean | undefined;
        maxLength?: number | undefined;
        autoFocus?: boolean | undefined;
        placeholder?: React.ReactNode;
        tabIndex?: number | undefined;
        "aria-activedescendant"?: string | undefined;
        "aria-atomic"?: (boolean | "true" | "false") | undefined;
        "aria-autocomplete"?: "list" | "none" | "inline" | "both" | undefined;
        "aria-busy"?: (boolean | "true" | "false") | undefined;
        "aria-checked"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-colcount"?: number | undefined;
        "aria-colindex"?: number | undefined;
        "aria-colspan"?: number | undefined;
        "aria-controls"?: string | undefined;
        "aria-current"?: boolean | "time" | "date" | "true" | "false" | "step" | "page" | "location" | undefined;
        "aria-describedby"?: string | undefined;
        "aria-details"?: string | undefined;
        "aria-disabled"?: (boolean | "true" | "false") | undefined;
        "aria-dropeffect"?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        "aria-errormessage"?: string | undefined;
        "aria-expanded"?: (boolean | "true" | "false") | undefined;
        "aria-flowto"?: string | undefined;
        "aria-grabbed"?: (boolean | "true" | "false") | undefined;
        "aria-haspopup"?: boolean | "dialog" | "menu" | "grid" | "listbox" | "tree" | "true" | "false" | undefined;
        "aria-hidden"?: (boolean | "true" | "false") | undefined;
        "aria-invalid"?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        "aria-keyshortcuts"?: string | undefined;
        "aria-label"?: string | undefined;
        "aria-labelledby"?: string | undefined;
        "aria-level"?: number | undefined;
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        "aria-modal"?: (boolean | "true" | "false") | undefined;
        "aria-multiline"?: (boolean | "true" | "false") | undefined;
        "aria-multiselectable"?: (boolean | "true" | "false") | undefined;
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        "aria-owns"?: string | undefined;
        "aria-placeholder"?: string | undefined;
        "aria-posinset"?: number | undefined;
        "aria-pressed"?: boolean | "true" | "false" | "mixed" | undefined;
        "aria-readonly"?: (boolean | "true" | "false") | undefined;
        "aria-relevant"?: "text" | "additions" | "additions removals" | "additions text" | "all" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        "aria-required"?: (boolean | "true" | "false") | undefined;
        "aria-roledescription"?: string | undefined;
        "aria-rowcount"?: number | undefined;
        "aria-rowindex"?: number | undefined;
        "aria-rowspan"?: number | undefined;
        "aria-selected"?: (boolean | "true" | "false") | undefined;
        "aria-setsize"?: number | undefined;
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        "aria-valuemax"?: number | undefined;
        "aria-valuemin"?: number | undefined;
        "aria-valuenow"?: number | undefined;
        "aria-valuetext"?: string | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: import("rc-select/lib/Select").SelectHandler<any, import("rc-select/lib/Select").DefaultOptionType> | undefined;
        "aria-braillelabel"?: string | undefined;
        "aria-brailleroledescription"?: string | undefined;
        "aria-colindextext"?: string | undefined;
        "aria-description"?: string | undefined;
        "aria-rowindextext"?: string | undefined;
        bordered?: boolean | undefined;
        allowClear?: boolean | {
            clearIcon?: import("rc-select/lib/interface").RenderNode;
        } | undefined;
        clearIcon?: import("rc-select/lib/interface").RenderNode;
        onSearch?: ((value: string) => void) | undefined;
        searchValue?: string | undefined;
        autoClearSearchValue?: boolean | undefined;
        showSearch?: boolean | undefined;
        tagRender?: ((props: import("rc-select/lib/BaseSelect").CustomTagProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>) | undefined;
        direction?: "ltr" | "rtl" | undefined;
        notFoundContent?: React.ReactNode;
        onClear?: (() => void) | undefined;
        choiceTransitionName?: string | undefined;
        loading?: boolean | undefined;
        defaultOpen?: boolean | undefined;
        onDropdownVisibleChange?: ((open: boolean) => void) | undefined;
        maxTagTextLength?: number | undefined;
        maxTagCount?: number | "responsive" | undefined;
        maxTagPlaceholder?: React.ReactNode | ((omittedValues: import("rc-select/lib/interface").DisplayValueType[]) => React.ReactNode);
        tokenSeparators?: string[] | undefined;
        suffixIcon?: React.ReactNode;
        removeIcon?: import("rc-select/lib/interface").RenderNode;
        dropdownStyle?: React.CSSProperties | undefined;
        dropdownRender?: ((menu: React.ReactElement<any, string | React.JSXElementConstructor<any>>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>) | undefined;
        dropdownAlign?: import("@rc-component/trigger").AlignType | undefined;
        getPopupContainer?: import("rc-select/lib/interface").RenderDOMFunc | undefined;
        showAction?: ("focus" | "click")[] | undefined;
        onPopupScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onInputKeyDown?: React.KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
        fieldNames?: import("rc-select/lib/Select").FieldNames | undefined;
        inputValue?: string | undefined;
        onDeselect?: import("rc-select/lib/Select").SelectHandler<any, import("rc-select/lib/Select").DefaultOptionType> | undefined;
        filterOption?: boolean | import("rc-select/lib/Select").FilterFunc<import("rc-select/lib/Select").DefaultOptionType> | undefined;
        filterSort?: ((optionA: import("rc-select/lib/Select").DefaultOptionType, optionB: import("rc-select/lib/Select").DefaultOptionType) => number) | undefined;
        optionFilterProp?: string | undefined;
        optionLabelProp?: string | undefined;
        defaultActiveFirstOption?: boolean | undefined;
        virtual?: boolean | undefined;
        listHeight?: number | undefined;
        listItemHeight?: number | undefined;
        menuItemSelectedIcon?: import("rc-select/lib/interface").RenderNode;
        labelInValue?: boolean | undefined;
    };
};
